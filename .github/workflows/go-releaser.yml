name: go-releaser

on:
  pull_request:
  push:
    # run only against tags
    tags:
      - "v*"

permissions:
  contents: write
  # packages: write
  # issues: write
  # id-token: write

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0
#       - uses: actions/setup-go@v2
#         with:
#           go-version: 1.19
#           cache: true
#       - run: go mod tidy
#       - run: go test -v ./...
#       - uses: docker/login-action@v1
#         with:
#           registry: ghcr.io
#           username: ${{ github.repository_owner }}
#           password: ${{ secrets.GH_PAT }}
#       - uses: goreleaser/goreleaser-action@v2
#         if: success() && startsWith(github.ref, 'refs/tags/')
#         with:
#           version: latest
#           args: release --rm-dist
#         env:
#           GITHUB_TOKEN: ${{ secrets.GH_PAT }}

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          cache: true
      # More assembly might be required: Docker logins, GPG, etc.
      # It all depends on your needs.
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          # either 'goreleaser' (default) or 'goreleaser-pro'
          distribution: goreleaser
          # 'latest', 'nightly', or a semver
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISCORD_WEBHOOK_ID: ${{ secrets.DISCORD_WEBHOOK_ID }}
          DISCORD_WEBHOOK_TOKEN: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          # Your GoReleaser Pro key, if you are using the 'goreleaser-pro' distribution
          # GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
